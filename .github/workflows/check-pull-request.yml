name: check-pull-request

on:
  pull_request:

env:
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  TOKEN_HOST: https://auth.us-east-2.propeldata.com
  TOKEN_PATH: /oauth2/token

jobs:
  javascript:
    name: Lint and Test JavaScript
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ '18.x', '20.x' ]
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env file
        run: |
          cd ./javascript
          touch .env
          echo CLIENT_ID=dummy >> .env
          echo CLIENT_SECRET=dummy >> .env
          echo TOKEN_HOST=dummy >> .env
          echo TOKEN_PATH=dummy >> .env
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: | 
          cd ./javascript
          npm install
          npm run lint
          npm test

  typescript:
    name: Lint and Test TypeScript
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ '18.x', '20.x' ]
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env file
        run: |
          cd ./typescript
          touch .env
          echo CLIENT_ID=dummy >> .env
          echo CLIENT_SECRET=dummy >> .env
          echo TOKEN_HOST=dummy >> .env
          echo TOKEN_PATH=dummy >> .env
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: | 
          cd ./typescript
          npm install
          npm run lint  # Your package.json should define a "lint" script for TypeScript
          npm test

  python:
    name: Lint and Test Python
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "pypy3.9", "pypy3.10", "3.9", "3.10", "3.11", "3.12" ]

    steps:
      - uses: actions/checkout@v4
      - name: Generate .env file
        run: |
          cd ./python
          touch .env
          echo CLIENT_ID=dummy >> .env
          echo CLIENT_SECRET=dummy >> .env
          echo TOKEN_HOST=dummy >> .env
          echo TOKEN_PATH=dummy >> .env
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: | 
          cd ./python
          pip install flake8 pytest
          pip install -r requirements.txt
          flake8 .
          pytest

  golang:
    name: Lint and Test Go
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.19', '1.20', '1.21.x' ]

    steps:
      - uses: actions/checkout@v4
      - name: Generate .env file
        run: |
          cd ./golang
          touch .env
          echo CLIENT_ID=dummy >> .env
          echo CLIENT_SECRET=dummy >> .env
          echo TOKEN_HOST=dummy >> .env
          echo TOKEN_PATH=dummy >> .env
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: false
      - run: | 
          cd ./golang
          go get -v -t -d ./...
          go build -v ./...
      - name: Run Linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
      - run: |
          cd ./golang
          go test -v ./...

  dotnet:
    name: Lint and Test .NET
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env file
        run: |
          cd ./dotnet/PropelOAuthExampleApp
          touch .env
          echo CLIENT_ID=dummy >> .env
          echo CLIENT_SECRET=dummy >> .env
          echo TOKEN_HOST=dummy >> .env
          echo TOKEN_PATH=dummy >> .env
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x'  # Use the version of .NET that your project uses
      - run: | 
          cd ./dotnet/PropelOAuthExampleApp
          dotnet restore
          dotnet build
          dotnet tool install -g dotnet-format
          dotnet format --check
          dotnet test --no-build --verbosity normal
