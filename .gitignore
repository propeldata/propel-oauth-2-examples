# Node - Covers JavaScript and TypeScript
node_modules/
npm-debug.log
yarn-error.log
dist/
.env
*.env.local
.DS_Store
*.pnp
.pnp.js

# TypeScript
*.tsbuildinfo

# Python
__pycache__/
*.py[cod]
*.pyo
*.pyd
.Python
env/
venv/
ENV/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Golang
/vendor/
*.lock
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib
# Test binary, built with `go test -c`
*.test
# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# .NET
bin/
obj/
*.user
*.userprefs
*.suo
*.cache
*.csproj
*.vbproj
*.snk
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/ReSharper/
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets
# Microsoft Visual Studio cache files
.vs/
# MSTest test Results
TestResults
# NUnit
*.VisualState.xml
TestResult.xml
# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Rust
# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# Ruby
/.bundle/
/vendor/bundle
*.gem
*.rbc
/.config
/coverage/
/Gemfile.lock
/*.gemspec
/bin/
/db/*.sqlite3
/db/*.sqlite3-journal
/log/
/tmp/

